// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext{
        kotlin = '1.6.10'
        kotlinx = "1.6.4"
    }
    repositories {
        maven { url "http://192.168.50.6:8081/artifactory/mg-app-libs-release/" }
        maven { url "http://192.168.50.6:8081/artifactory/mg-app-libs-snapshot/" }
        google()
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.29.2'
    }
}

allprojects {
    repositories {
        maven { url "http://192.168.50.6:8081/artifactory/mg-app-libs-release/" }
        maven { url "http://192.168.50.6:8081/artifactory/mg-app-libs-snapshot/" }
        google()
        jcenter()
        maven {
            url "https://dl.bintray.com/osborn/Android"
        }
        mavenCentral()
        mavenLocal()
    }
    def needReplaceLocal = true
    gradle.startParameter.taskNames.each {
        if (it.contains('uploadArchives')) {
            needReplaceLocal = false
        }
    }
    if (needReplaceLocal) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module('com.github.penfeizhou.android.animation:frameanimation') with project(":frameanimation")
                    substitute module('com.github.penfeizhou.android.animation:apng') with project(":apng")
                    substitute module('com.github.penfeizhou.android.animation:awebp') with project(":awebp")
                    substitute module('com.github.penfeizhou.android.animation:gif') with project(":gif")
                    substitute module('com.github.penfeizhou.android.animation:glide-plugin') with project(":plugin_glide")
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

Properties properties = new Properties()
properties.load(project.rootProject.file('version.properties').newDataInputStream())

ext {
    Version = properties.version
}

task publishFrameAnimation dependsOn(":frameanimation:uploadArchives") {
    println "FrameAnimation published"
}

task publishAPNG dependsOn(publishFrameAnimation, ":apng:uploadArchives") {
    println "APNG published"
}

task publishAWebP dependsOn(publishFrameAnimation, ":awebp:uploadArchives") {
    println "AWebP published"
}

task publishGif dependsOn(publishFrameAnimation, ":gif:uploadArchives") {
    println "Gif published"
}

task publishAWebPEncoder dependsOn(publishAWebP, publishGif, ":awebpencoder:uploadArchives") {
    println "AwebP Encoder published"
}

task publishGlidePlugin dependsOn(publishAPNG, publishAWebP, publishGif, ":plugin_glide:uploadArchives") {
    println "GlidePlugin published"
}

task PublishAll dependsOn(publishGlidePlugin, publishAWebPEncoder) {
    println "All published"
}


ext {
    build_tool_version = '33.0.1'
    build_sdk_version = 33
    target_api_level = 33
    min_api_level = 16
    appcompat = '1.3.0'
}
